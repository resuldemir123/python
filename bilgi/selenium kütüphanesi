Elbette! **Selenium**, web tarayÄ±cÄ±larÄ±nÄ± otomatikleÅŸtirmek iÃ§in kullanÄ±lan popÃ¼ler bir araÃ§tÄ±r. Python ile birlikte kullanÄ±ldÄ±ÄŸÄ±nda, web sitelerinde otomatik testler yapmak, veri Ã§ekmek veya tekrarlayan gÃ¶revleri otomatikleÅŸtirmek iÃ§in oldukÃ§a gÃ¼Ã§lÃ¼ bir araÃ§ haline gelir. AÅŸaÄŸÄ±da Selenium hakkÄ±nda detaylÄ± bilgiler bulabilirsiniz.

---

## **Selenium Nedir?**
Selenium, web tarayÄ±cÄ±larÄ±nÄ± otomatikleÅŸtirmek iÃ§in kullanÄ±lan aÃ§Ä±k kaynaklÄ± bir araÃ§tÄ±r. Ã–zellikle web uygulamalarÄ±nÄ±n test edilmesi iÃ§in tasarlanmÄ±ÅŸtÄ±r, ancak web scraping (web kazÄ±ma) ve otomasyon iÃ§in de yaygÄ±n olarak kullanÄ±lÄ±r.

---

## **Selenium'un Temel Ã–zellikleri**
1. **TarayÄ±cÄ± Otomasyonu:** Chrome, Firefox, Edge gibi popÃ¼ler tarayÄ±cÄ±larÄ± otomatikleÅŸtirir.
2. **Ã‡oklu Dil DesteÄŸi:** Python, Java, C#, JavaScript gibi dillerle kullanÄ±labilir.
3. **Dinamik Web SayfalarÄ±:** JavaScript tabanlÄ± dinamik web sayfalarÄ±yla etkileÅŸim kurar.
4. **Test SenaryolarÄ±:** Web uygulamalarÄ±nÄ±n test edilmesi iÃ§in kullanÄ±lÄ±r.
5. **Web Scraping:** Web sitelerinden veri Ã§ekmek iÃ§in kullanÄ±lÄ±r.

---

## **Selenium Kurulumu**
Selenium'u Python ile kullanmak iÃ§in Ã¶ncelikle kurulum yapmanÄ±z gerekiyor.

### **1. Selenium Paketini Kurma**
Terminal veya komut satÄ±rÄ±nda aÅŸaÄŸÄ±daki komutu Ã§alÄ±ÅŸtÄ±rÄ±n:
```bash
pip install selenium
```

### **2. WebDriver Kurulumu**
Selenium, tarayÄ±cÄ±larÄ± otomatikleÅŸtirmek iÃ§in WebDriver kullanÄ±r. KullanacaÄŸÄ±nÄ±z tarayÄ±cÄ±ya uygun WebDriver'Ä± indirmeniz gerekiyor.

- **Chrome iÃ§in:** [ChromeDriver](https://sites.google.com/chromium.org/driver/)
- **Firefox iÃ§in:** [GeckoDriver](https://github.com/mozilla/geckodriver/releases)
- **Edge iÃ§in:** [EdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)

WebDriver'Ä± indirdikten sonra, PATH'e ekleyin veya kod iÃ§inde yolunu belirtin.

---

## **Selenium ile Temel Ä°ÅŸlemler**

### **1. TarayÄ±cÄ±yÄ± BaÅŸlatma**
```python
from selenium import webdriver

# Chrome tarayÄ±cÄ±sÄ±nÄ± baÅŸlat
driver = webdriver.Chrome(executable_path="path/to/chromedriver")

# Web sitesini aÃ§
driver.get("https://www.example.com")
```

---

### **2. Web Elementlerini Bulma**
Selenium, web sayfasÄ±ndaki elementleri bulmak iÃ§in Ã§eÅŸitli yÃ¶ntemler sunar.

#### **Ã–rnekler:**
```python
# ID ile element bulma
element = driver.find_element_by_id("element-id")

# Name ile element bulma
element = driver.find_element_by_name("element-name")

# Class Name ile element bulma
element = driver.find_element_by_class_name("element-class")

# XPath ile element bulma
element = driver.find_element_by_xpath("//div[@class='example']")

# CSS Selector ile element bulma
element = driver.find_element_by_css_selector(".example-class")
```

---

### **3. Elementlerle EtkileÅŸim**
Bulunan elementlerle etkileÅŸim kurmak iÃ§in Ã§eÅŸitli yÃ¶ntemler vardÄ±r.

#### **Ã–rnekler:**
```python
# Metin yazma
element.send_keys("Merhaba DÃ¼nya!")

# TÄ±klama
element.click()

# Metin okuma
text = element.text
print(text)

# Ã–zellik deÄŸerini alma
attribute_value = element.get_attribute("href")
print(attribute_value)
```

---

### **4. Sayfa Gezinme**
```python
# SayfayÄ± yenileme
driver.refresh()

# Geri gitme
driver.back()

# Ä°leri gitme
driver.forward()
```

---

### **5. TarayÄ±cÄ±yÄ± Kapatma**
```python
# TarayÄ±cÄ±yÄ± kapat
driver.quit()

# Sadece mevcut sekmeyi kapat
driver.close()
```

---

## **Selenium ile Ä°leri DÃ¼zey Ä°ÅŸlemler**

### **1. Bekleme Ä°ÅŸlemleri**
Web sayfalarÄ± yÃ¼klenirken veya elementler gÃ¶rÃ¼nÃ¼r hale gelirken bekleme iÅŸlemleri yapmak gerekebilir.

#### **Ã–rnek:**
```python
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Element gÃ¶rÃ¼nÃ¼r olana kadar bekle
element = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.ID, "element-id"))
)
```

---

### **2. JavaScript Ã‡alÄ±ÅŸtÄ±rma**
Selenium ile tarayÄ±cÄ±da JavaScript kodu Ã§alÄ±ÅŸtÄ±rabilirsiniz.

#### **Ã–rnek:**
```python
driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
```

---

### **3. Ã‡erez YÃ¶netimi**
```python
# Ã‡erez ekleme
driver.add_cookie({"name": "cookie_name", "value": "cookie_value"})

# Ã‡erezleri alma
cookies = driver.get_cookies()
print(cookies)

# Ã‡erez silme
driver.delete_cookie("cookie_name")
```

---

### **4. Ekran GÃ¶rÃ¼ntÃ¼sÃ¼ Alma**
```python
driver.save_screenshot("screenshot.png")
```

---

### **5. Birden Fazla Sekme veya Pencere YÃ¶netimi**
```python
# Yeni sekme aÃ§ma
driver.execute_script("window.open('https://www.example.com');")

# Sekmeler arasÄ±nda geÃ§iÅŸ yapma
driver.switch_to.window(driver.window_handles[1])  # Ä°kinci sekmeye geÃ§
```

---

## **Selenium ile Web Scraping Ã–rneÄŸi**
AÅŸaÄŸÄ±da, bir web sitesinden baÅŸlÄ±klarÄ± Ã§eken basit bir Ã¶rnek bulunmaktadÄ±r.

```python
from selenium import webdriver
from selenium.webdriver.common.by import By

# Chrome tarayÄ±cÄ±sÄ±nÄ± baÅŸlat
driver = webdriver.Chrome(executable_path="path/to/chromedriver")

# Web sitesini aÃ§
driver.get("https://www.example.com")

# BaÅŸlÄ±klarÄ± bul
headings = driver.find_elements(By.TAG_NAME, "h1")

# BaÅŸlÄ±klarÄ± yazdÄ±r
for heading in headings:
    print(heading.text)

# TarayÄ±cÄ±yÄ± kapat
driver.quit()
```

---

## **Selenium ile Test Otomasyonu Ã–rneÄŸi**
AÅŸaÄŸÄ±da, bir giriÅŸ formunu otomatik olarak dolduran ve gÃ¶nderen bir Ã¶rnek bulunmaktadÄ±r.

```python
from selenium import webdriver
from selenium.webdriver.common.by import By

# Chrome tarayÄ±cÄ±sÄ±nÄ± baÅŸlat
driver = webdriver.Chrome(executable_path="path/to/chromedriver")

# Web sitesini aÃ§
driver.get("https://www.example.com/login")

# KullanÄ±cÄ± adÄ± ve ÅŸifre alanlarÄ±nÄ± bul
username = driver.find_element(By.ID, "username")
password = driver.find_element(By.ID, "password")

# KullanÄ±cÄ± adÄ± ve ÅŸifreyi gir
username.send_keys("testuser")
password.send_keys("testpassword")

# GiriÅŸ butonuna tÄ±kla
login_button = driver.find_element(By.ID, "login-button")
login_button.click()

# TarayÄ±cÄ±yÄ± kapat
driver.quit()
```

---

## **Selenium ile Ä°lgili Ä°puÃ§larÄ±**
1. **WebDriver'Ä± GÃ¼ncel Tutun:** TarayÄ±cÄ± ve WebDriver sÃ¼rÃ¼mlerinin uyumlu olmasÄ±na dikkat edin.
2. **Bekleme Ä°ÅŸlemlerini KullanÄ±n:** Dinamik web sayfalarÄ±nda elementlerin yÃ¼klenmesini beklemek iÃ§in `WebDriverWait` kullanÄ±n.
3. **Headless Mod:** TarayÄ±cÄ±yÄ± gÃ¶rÃ¼nmez (headless) modda Ã§alÄ±ÅŸtÄ±rarak performansÄ± artÄ±rabilirsiniz.
   ```python
   from selenium.webdriver.chrome.options import Options

   options = Options()
   options.add_argument("--headless")
   driver = webdriver.Chrome(options=options)
   ```
4. **Hata YÃ¶netimi:** Beklenmeyen durumlar iÃ§in `try-except` bloklarÄ± kullanÄ±n.

---

## **SonuÃ§**
Selenium, web tarayÄ±cÄ±larÄ±nÄ± otomatikleÅŸtirmek iÃ§in gÃ¼Ã§lÃ¼ bir araÃ§tÄ±r. Python ile birlikte kullanÄ±ldÄ±ÄŸÄ±nda, web scraping, test otomasyonu ve tekrarlayan gÃ¶revler iÃ§in oldukÃ§a etkilidir. YukarÄ±daki Ã¶rnekler ve ipuÃ§larÄ±yla Selenium'u projelerinizde rahatlÄ±kla kullanabilirsiniz. ğŸš€